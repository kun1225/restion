---
description: 
globs: 
alwaysApply: true
---
# 產品需求文件 (PRD)— 專注休息計時器

## 1. 產品概述

**背景**
現行蕃茄鐘 (Pomodoro Timer)大多採用固定 25/5 或 50/10 的工休節奏, 缺乏依照實際「專注時長」動態計算休息的工具。本產品旨在提供一套「專注時間 ÷ 比例 = 休息時間」的彈性機制, 並支援自訂提醒、背景音樂與佈景, 提升工作與學習效率。

**目標**

* 使用者能自由設定專注時間與休息比例, 系統自動計算休息長度。
* 支援循環與連續提醒:可設定固定時間間隔提醒 (例如每 25 分鐘)而不強制暫停。
* 允許上傳自選音樂作為背景音樂, 並可調整音量、循環播放。
* 允許上傳圖片作為應用程式背景, 並提供基礎適應性設定 (填滿、置中、模糊)。
* 提供歷史統計與數據視覺化, 協助使用者檢視專注時間與休息品質。

## 2. 目標使用者與情境

1. **遠距工作者**:需要規律工休節奏, 並希望透過個性化背景音樂改善專注度。
2. **考生 / 學生**:長時間閱讀與練習, 希望彈性設置「專注—休息」比例, 以避免疲勞。
3. **創作者 / 自由職業者**:需進行靈活創作流程, 不定時需要提醒但不中斷靈感。
4. **團隊 / 公司**:需要統計專案時長，一起工作提高凝聚力。

## 3. 核心功能

1. **動態專注/休息計時器**
   * 休息比率設定 (分數或滑桿, 預設 5:1)。
   * 根據專注時間，自動計算休息時間並顯示倒數。

2. **自訂提醒**
   * 間隔提醒:固定時間間隔閃爍或音效提示, 不影響計時。
   * 任務提醒:可設定自定義訊息 (如喝水、拉伸)。

3. **背景音樂上傳與播放**
   * 支援 MP3、AAC、WAV (單檔 ≤ 20 MB)。
   * 清單管理:多首曲目輪播、隨機或單曲循環。
   * 音量條與靜音切換。

4. **背景圖片上傳**
   * 支援 JPG、PNG、WebP (單檔 ≤ 5 MB)。
   * 版面調整:填滿、置中、模糊遮罩。

5. **歷史記錄與統計**
   * 每日/每週/每月專注時數、休息時數、平均比例圖表。
   * 匯出 CSV。

6. **多平台響應式 UI**
   * 桌面 Web、平板、手機 (PWA)。

7. **團隊協作**
   * 主管分配專案任務給團員
   * 統計專案工作時長

8. **多語言支援** (最少:中文、英文)。

## 5. 用戶故事 (User Stories)

| 角色      | 敘述                              | 驗收準則                              |
| ------- | ------------------------------- | --------------------------------- |
| 作為學生    | 我想設定休息比例 6，在專注 90 分鐘，休息時間因為 15 分鐘 | 結束專注後，計時器自動顯示 15 休息時間。        |
| 作為設計師   | 我想要每 30 分鐘收到提醒但不暫停計時            | 在專注倒數中, 系統於每 30 分鐘彈出提醒並播放音效, 計時不中斷。 |
| 作為遠距工作者 | 我想上傳白噪音 MP3 作為背景音樂              | MP3 成功上傳後排進播放清單, 並可立即播放。           |
| 作為自由職業者 | 我想用我拍的海邊照片作為背景                  | 圖片套用後, UI 背景即時更新。                  |
| 作為數據控   | 我想查看本週總專注時數和平均休息比例              | 在統計頁面顯示折線圖與比例。                    |
| 作為主管 | 我想分配任務給隊員，並統計專案的工作時長 | 可以設定任務並指派給團員，並在統計頁面看到統計數據 |

## 6. 功能需求明細

### 6.1 計時器 & 演算法

* `focusDuration` (int, 分鐘)
* `restRatio` (float, 預設 5)
* `restDuration = focusDuration / restRatio`
* 支援循環:完成休息後自動重新進入專注階段 (可停用)。
* 支援暫停 / 恢復 / 重置。
* 前端倒數以視覺進度環顯示。

### 6.2 提醒系統

* `reminderInterval` (int, 分鐘, 0 = 關閉)。
* 通知:瀏覽器 Notification API + 音效。
* 不影響計時進度。

### 6.3 媒體管理

* 前端使用 `<audio>`; 後端存檔於物件儲存 (AWS S3 / GCP Cloud Storage)。
* 圖片生成 CSS `background-image` 即時更新。
* 對檔案做 MIME 檢查與大小限制。

### 6.4 統計模組

* 本地: IndexedDB + 雲端同步 (登錄後)。
* 圖表: ApexCharts

### 6.5 設定持久化

* 匿名使用者使用 LocalStorage。
* 登入後同步到雲端 DB (Firebase / Supabase)。

## 7. 非功能需求

| 類別   | 描述                                                    |
| ---- | ----------------------------------------------------- |
| 性能   | 倒數精準誤差 < 100 ms / 30 分鐘                               |
| 音效播放 | 音訊延遲 < 200 ms                                         |
| 可用性  | 99.5% 月可用性                                            |
| 安全   | 使用 HTTPS、CSP、XSS 防護; 檔案掃毒, 最大 20 MB 上傳限制; GDPR & 台灣個資法遵循 |
| 隱私   | 僅收集必要之計時數據與帳號資訊; 提供匯出與刪除機制                             |
| 韌性   | 前端 Service Worker 離線支援                                |

## 8. 技術架構

### 8.1 前端技術架構
Vue / Nuxt 4、TypeScript、Tailwind CSS、PWA。

### 8.2 後端技術架構
Node.js + Express (REST), Cloud Functions。

### 8.3 資料庫
PostgreSQL (使用 Knex.js)。

### 8.4 即時與排程
* **即時與排程**:Web Worker + Broadcast Channel 處理倒數; 後端 Scheduler 處理提醒推播。

## 9 部署
  前端: Vercel
  後端 + 資料庫: Docker compose。

## 9 測試驅動開發策略

### 9.1 測試優先原則

本產品採用測試驅動開發 (TDD) 方法，確保每個功能模組在開發前先定義測試用例，以保證代碼品質與功能正確性。

**測試金字塔結構：**
- **單元測試 (70%)**：核心邏輯、計時器演算法、數據處理函數
- **整合測試 (20%)**：API 端點、資料庫操作、第三方服務整合
- **端到端測試 (10%)**：關鍵用戶流程、跨瀏覽器相容性

### 9.2 核心功能測試重點

**計時器精準度測試**
- 專注/休息時間計算精度驗證
- 倒數計時誤差測試 (< 100ms/30分鐘)
- 暫停/恢復/重置功能測試
- 跨頁面/裝置狀態同步測試

**媒體功能測試**
- 音訊檔案上傳、播放、音量控制
- 圖片上傳、背景套用、響應式適配
- 檔案大小限制與MIME類型驗證
- 播放清單管理功能測試

**資料持久化測試**
- LocalStorage/IndexedDB 資料儲存
- 雲端同步機制測試
- 統計數據計算準確性
- 歷史記錄完整性驗證

### 9.3 自動化測試工具鏈

**前端測試**
- **單元測試**: Vitest + Vue Test Utils
- **組件測試**: Cypress Component Testing
- **E2E測試**: Playwright (跨瀏覽器)
- **視覺回歸測試**: Percy / Chromatic

**後端測試**
- **API測試**: Jest + Supertest
- **資料庫測試**: 內存資料庫 + 測試夾具
- **效能測試**: Artillery / K6
- **安全測試**: OWASP ZAP / Snyk

### 9.4 持續整合測試流程

**預提交檢查**
- 程式碼靜態分析 (ESLint, TypeScript)
- 單元測試覆蓋率 ≥ 80%
- 安全漏洞掃描

**CI/CD 流水線**
1. 程式碼推送觸發自動測試
2. 並行執行單元測試與整合測試
3. 部署到測試環境執行 E2E 測試
4. 效能基準測試 (計時精度、記憶體使用)
5. 通過後部署到生產環境

### 9.5 測試覆蓋率目標

| 測試類型 | 覆蓋率目標 | 重點模組 |
|---------|----------|----------|
| 單元測試 | ≥ 80% | 計時器邏輯、數據計算、工具函數 |
| 整合測試 | ≥ 60% | API 端點、資料庫操作 |
| E2E測試 | 100% | 關鍵用戶流程 (註冊、計時、設定) |

### 9.6 測試數據與環境管理

**測試環境隔離**
- 開發環境：本地開發與快速迭代
- 測試環境：模擬生產環境配置
- 預生產環境：最終驗證與壓力測試

**測試數據管理**
- 使用 Factory 模式生成測試數據
- 資料庫種子數據與清理機制
- 媒體檔案模擬與快取策略

## 9. UX / UI

* **首頁**:專注倒數圓環、暫停/重置按鈕、下一階段提示。
* **設定抽屜**:調整專注時間、比例、提醒間隔。
* **媒體庫**:分頁顯示已上傳音樂 & 圖片, 支援拖放。
* **統計頁**:折線圖 (專注 & 休息)、圓餅圖 (比例)。
* **模態視窗**:完成階段時顯示鼓勵語。
* **色系**:低彩度、避免干擾, 深淺模式。


## 10. 風險與緩解

| 風險       | 影響    | 緩解方案                    |
| -------- | ----- | ----------------------- |
| 前端倒數精度不足 | 用戶體驗差 | 使用 Web Worker、校時機制      |
| 音樂版權爭議   | 法律風險  | 僅允許私有播放, 不共享檔案; 加入使用者責任條款 |
| 上傳空間成本   | 經費超支  | 設定檔案大小與數量上限, 採按量計費儲存方案   |

## 11. 競品分析

* **Pomofocus**:固定工休, 無自訂背景音樂。
* **Forest**:遊戲化, 無動態比例。
* **Focus To-Do**:具備統計, 但音樂功能侷限。
  本產品以「動態比例 + 音樂/背景自訂」差異化。

## 12. 後續擴充

* 第三方音樂串流整合 (Spotify / YouTube Music)。
* AI 建議專注/休息比例, 根據歷史數據。
